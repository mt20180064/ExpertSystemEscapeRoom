package com.sample.rules;
import com.sample.main.model.Room;
import com.sample.main.model.Age;
import com.sample.main.model.Status;
import com.sample.main.model.Duration;
import com.sample.main.model.Level;
import com.sample.main.model.Team;
import com.sample.main.model.Type;
import com.sample.main.model.Activity;
import com.sample.main.model.Goal;
import com.sample.main.model.Genre;
 
rule "Određivanje starosti igrača "
    when
    t: Team (years <=14)
        r : Room(age==Age.ADULTS)
    then
        r.setAge(Age.CHILDREN);
        update( r );
end

rule "Broj soba na lokaciji kada jedan tim hoće da odigra povezane sobe"
    when
        r : Room(duration == Duration.HOURS && event==false && numberOfRoomsOnLocation == null)
    then
        r.setNumberOfRoomsOnLocation (2l);
        update( r );
end

rule "Broj soba na lokaciji za manji događaj"
    when
        t: Team (numberOfPlayers <= 12 && numberOfPlayers >= 6) 
        r : Room(event==true && numberOfRoomsOnLocation == null)
    then
        r.setNumberOfRoomsOnLocation (2l);
        update( r );
end

rule "Broj soba na lokaciji za srednji događaj"
    when
    t: Team (numberOfPlayers >= 12 && numberOfPlayers <= 18)
        r : Room(event==true && numberOfRoomsOnLocation == null)
    then
        r.setNumberOfRoomsOnLocation (3l);
        update( r );
end

rule "Broj soba na lokaciji za veliki događaj"
    when
    t:Team (numberOfPlayers >= 18 && numberOfPlayers <= 24)
        r : Room(event==true  && numberOfRoomsOnLocation == null)
    then
        r.setNumberOfRoomsOnLocation (4l);
        update( r );
end

rule "Potpuni početnici"
    when
     t: Team (gamesPlayed==0 && status==null)
       
    then
        t.setStatus (Status.BEGINNER);
        update( t );
        
end

rule "početnici"
    when
    t: Team (gamesPlayed<=5 && gamesPlayed>=1 && (gamesSolved==0 || gamesSolved ==1) && status==null)
      
    then
        t.setStatus (Status.BEGINNER);
        update( t );
end


rule "status:igrač u vidu uspеšnog početnika"
    when
    t:Team (gamesPlayed<=5 && gamesPlayed>=1 && gamesSolved>=2 && status==null)
        
    then
        t.setStatus (Status.INTERMEDIATE);
        update( t );
end

rule "status:igrač bez obzira na ishod"
    when
    t:Team (gamesPlayed>5 && gamesPlayed<=10 && status==null)
       
    then
        t.setStatus (Status.INTERMEDIATE);
        update( t );
end

rule "iskusan, a ne i preterano dobar"
    when
    t:Team (gamesPlayed>10 && gamesPlayed<=15 && gamesSolved <= 7 && status==null)
      
    then
        t.setStatus (Status.INTERMEDIATE);
        update( t );
end

rule "iskusan i dobar"
    when
    t:Team (gamesPlayed>10 && gamesPlayed<=15 && gamesSolved > 7 && status==null)
      
    then
        t.setStatus (Status.EXPERT);
        update( t );
end

rule "veoma iskusan"
    when
       t:Team (gamesPlayed>15 && status==null)
       
    then
        t.setStatus (Status.EXPERT);
        update( t );
end

rule "lake sobe jer su pocetnici"
    when
    t: Team(status == Status.BEGINNER)
        r : Room(event==false && level==0 )
    then
        r.setLevel (1);
        update( r );
end

rule "lake sobe jer su deca"
    when
        r : Room(age==Age.CHILDREN && event==false && level==0 )
    then
        r.setLevel (1);
        update( r );
end

rule "srednje sobe"
    when
    t:Team (status == Status.INTERMEDIATE && numberOfPlayers<6 )
        r : Room( age==Age.ADULTS && event==false && level==0 )
    then
        r.setLevel (2);
        update( r );
end

rule "teske sobe za velike timove srednje jacine"
    when
    t:Team(status == Status.EXPERT )
        r : Room(age==Age.ADULTS && event==false && level==0)
    then
        r.setLevel (3);
        update( r );
end

rule "teske sobe za eksperte"
    when
    t: Team (status==Status.INTERMEDIATE  && numberOfPlayers==6)
        r : Room(age==Age.ADULTS && event==false && level==0)
    then
        r.setLevel (3);
        update( r );
end

rule "nivo kada su dogadjaji se uvek preporucuje da bude srednji kada su odrasli"
    when
        r : Room(age==Age.ADULTS && event==true && level==0)
    then
        r.setLevel (2);
        update( r );
end

rule "nivo kada su dogadjaji se uvek preporucuje da bude lako kada su deca"
    when
        r : Room(age==Age.CHILDREN && event==true && level==0)
    then
        r.setLevel (1);
        update( r );
end

rule "tip tima takmicari 1"
    when
     t: Team (goal == Goal.Pobeda && teamwork == false && type==null)
    then
        t.setType (Type.COMPETITIVE);
        update( t);
end

rule "tip tima takmicari 2"
    when
     t: Team (goal == Goal.Pobeda && teamwork == true && (activityToLike == Activity.Pab_kviz || activityToHate == Activity.Karaoke) && type==null)
    then
        t.setType (Type.COMPETITIVE);
        update( t);
end

rule "tip tima takmicari 3"
    when
     t: Team (goal == Goal.Uzbudjenje && teamwork == false && activityToLike!=Activity.Karaoke && type==null)
    then
        t.setType (Type.COMPETITIVE);
        update( t);
end

rule "tip tima avanturisti 1"
    when
     t: Team ((goal == Goal.Uzbudjenje || goal==Goal.Akcija) && teamwork==false && type==null)
    then
        t.setType (Type.ADVENTUROUS);
        update( t);
end

rule "tip tima avanturisti 2"
    when
     t: Team ((goal == Goal.Uzbudjenje || goal==Goal.Akcija) && teamwork==true && activityToLike==Activity.Karaoke && type==null)
    then
        t.setType (Type.ADVENTUROUS);
        update( t);
end

rule "tip tima avanturisti 3"
    when
     t: Team ((goal == Goal.Uzbudjenje || goal==Goal.Akcija) && teamwork==true && (activityToHate==Activity.Pab_kviz || activityToLike==Activity.Paintball) && type==null)
    then
        t.setType (Type.ADVENTUROUS);
        update( t);
end

rule "tip tima provod 1"
    when
     t: Team (goal == Goal.Zabava  && teamwork==true &&  type==null)
    then
        t.setType (Type.FUNNY);
        update( t);
end

rule "tip tima provod 2"
    when
     t: Team (goal == Goal.Zabava  && teamwork==false && activityToLike != Activity.Pab_kviz && type==null)
    then
        t.setType (Type.FUNNY);
        update( t);
end

rule "tip tima provod 3"
    when
     t: Team (goal == Goal.Uzbudjenje  && teamwork==true && activityToLike != Activity.Pab_kviz && activityToHate != Activity.Karaoke && type==null)
    then
        t.setType (Type.FUNNY);
        update( t);
end

rule "tip tima takmicari 4"
    when
     t: Team (goal == Goal.Zabava  && teamwork==false && activityToLike == Activity.Pab_kviz && type==null)
    then
        t.setType (Type.COMPETITIVE);
        update( t);
end

rule "tip tima avanturisti 4"
    when
     t: Team (goal == Goal.Pobeda  && teamwork==true && activityToLike == Activity.Paintball && activityToHate!=Activity.Karaoke && type==null)
    then
        t.setType (Type.ADVENTUROUS);
        update( t);
end

rule "tip tima provod 4"
    when
     t: Team (goal == Goal.Pobeda  && teamwork==true && (activityToLike == Activity.Karaoke || activityToLike==Activity.Klub_drustvenih_igara) && type==null)
    then
        t.setType (Type.FUNNY);
        update( t);
end

rule "tip tima provod 5"
    when
     t: Team (goal == Goal.Akcija  && teamwork==true && (activityToLike == Activity.Karaoke || activityToLike==Activity.Klub_drustvenih_igara) && activityToHate!=Activity.Pab_kviz && type==null)
    then
        t.setType (Type.FUNNY);
        update( t);
end

rule "tip tima takmicari 5"
    when
     t: Team (goal == Goal.Akcija  && teamwork==true && activityToLike == Activity.Pab_kviz  && activityToHate!=Activity.Pab_kviz && type==null)
    then
        t.setType (Type.COMPETITIVE);
        update( t);
end

rule "ako je odabran horor film"
no-loop true
    when
     g: Genre (movie==Movie.Horor)
    then
        g.setHorror(g.getHorror()+3);
        g.setMysterious(g.getMysterious()+1);
        g.setDetective(g.getDetective()+1);
        g.setAmbiental(g.getAmbiental()+1);
        update( g);
end

rule "ako je odabrana komedija"
no-loop true
    when
     g: Genre (movie==Movie.Komedija)
    then
        g.setHorror(g.getHorror()+1);
        g.setDetective(g.getDetective()+1);
        g.setAmbiental(g.getAmbiental()+1);
        g.setSpecific(g.getSpecific()+2);
        update( g);
end

rule "ako je odabrana misterija"
no-loop true
    when
     g: Genre (movie==Movie.Misterija)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+3);
        g.setDetective(g.getDetective()+2);
        g.setAmbiental(g.getAmbiental()+1);
        update( g);
end

rule "ako je odabrana drama"
no-loop true
    when
     g: Genre (movie==Movie.Drama)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+1);
        g.setThematic(g.getThematic()+1);
        g.setAmbiental(g.getAmbiental()+1);
        g.setSpecific(g.getSpecific()+2);
        update( g);
end

rule "ako je odabrana fantastika"
no-loop true
    when
     g: Genre (movie==Movie.Naucna_fantastika)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+1);
        g.setDetective(g.getDetective()+1);
        g.setAmbiental(g.getAmbiental()+2);
        g.setThematic(g.getThematic()+2);
        g.setSpecific(g.getSpecific()+2);
        update( g);
end

rule "ako je odabran istorijski film"
no-loop true
    when
     g: Genre (movie==Movie.Istorijski)
    then
        g.setMysterious(g.getMysterious()+1);
        g.setDetective(g.getDetective()+2);
        g.setAmbiental(g.getAmbiental()+1);
        g.setThematic(g.getThematic()+2);
        update( g);
end

rule "ako je odabran dokumentarac"
no-loop true
    when
     g: Genre (movie==Movie.Dokumentarni)
    then
        g.setMysterious(g.getMysterious()+1);
        g.setDetective(g.getDetective()+1);
        g.setAmbiental(g.getAmbiental()+1);
        g.setThematic(g.getThematic()+2);
        update( g);
end

rule "ako je odabrana akcija"
no-loop true
    when
     g: Genre (movie==Movie.Akcija)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+1);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+2);
        update( g);
end

rule "ako je odabrana knjiga lovac u zitu"
no-loop true
    when
     g: Genre (book==Book.Lovac_u_zitu)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+2);
        g.setAmbiental(g.getAmbiental()+1);
        update( g);
end

rule "ako je odabrana knjiga Zlocin i kazna"
no-loop true
    when
     g: Genre (book==Book.Zlocin_i_kazna)
    then
        g.setHorror(g.getHorror()+2);
        g.setMysterious(g.getMysterious()+3);
        g.setDetective(g.getDetective()+3);
        g.setSpecific(g.getSpecific()+1);
        g.setAmbiental(g.getAmbiental()+1);
        update( g);
end

rule "ako je odabrana knjiga Da Vincijev kod"
no-loop true
    when
     g: Genre (book==Book.Da_Vincijev_kod)
    then
        g.setHorror(g.getHorror()+2);
        g.setMysterious(g.getMysterious()+3);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+1);
        g.setAmbiental(g.getAmbiental()+2);
        update( g);
end

rule "ako je odabrana knjiga gordost i predrasude"
no-loop true
    when
     g: Genre (book==Book.Gordost_i_predrasude)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+1);
        g.setSpecific(g.getSpecific()+1);
        g.setAmbiental(g.getAmbiental()+2);
        g.setThematic(g.getThematic()+1);
        update( g);
end

rule "ako je odabrana knjiga dnevnik Ane Frank"
no-loop true
    when
     g: Genre (book==Book.Dnevnik_Ane_Frank)
    then
        g.setHorror(g.getHorror()+2);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+2);
        g.setAmbiental(g.getAmbiental()+1);
        g.setThematic(g.getThematic()+2);
        update( g);
end

rule "ako je odabrana knjiga gospodar prstenova"
no-loop true
    when
     g: Genre (book==Book.Gospodar_prstenova)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+1);
        g.setSpecific(g.getSpecific()+2);
        g.setAmbiental(g.getAmbiental()+2);
        g.setThematic(g.getThematic()+2);
        update( g);
end

rule "ako je tema za debatovanje politika"
no-loop true
    when
     g: Genre (debateTopic==DebateTopic.Politika)
    then
        g.setMysterious(g.getMysterious()+1);
        g.setDetective(g.getDetective()+1);
        update( g);
end

rule "ako je tema za debatovanje istorija"
no-loop true
    when
     g: Genre (debateTopic==DebateTopic.Istorija)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+1);
        g.setDetective(g.getDetective()+1);
        g.setAmbiental(g.getAmbiental()+2);
        g.setThematic(g.getThematic()+1);
        update( g);
end

rule "ako je tema za debatovanje filozofija"
no-loop true
    when
     g: Genre (debateTopic==DebateTopic.Filozofija)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+1);
        g.setAmbiental(g.getAmbiental()+1);
        update( g);
end

rule "ako je tema za debatovanje umetnost"
no-loop true
    when
     g: Genre (debateTopic==DebateTopic.Umetnost)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+2);
        g.setAmbiental(g.getAmbiental()+3);
        update( g);
end

rule "ako je odabrana slika prirode"
no-loop true
    when
     g: Genre (picture==Picture.Priroda)
    then
        g.setMysterious(g.getMysterious()+1);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+2);
        g.setAmbiental(g.getAmbiental()+2);
        update( g);
end

rule "ako je odabrana slika jednostavnog enterijera "
no-loop true
    when
      g: Genre (picture==Picture.Jednostavnost)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+1);
        
        update( g);
end

rule "ako je odabrana jeziva slika"
no-loop true
    when
     g: Genre (picture==Picture.Jeza)
    then
        g.setHorror(g.getHorror()+3);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+1);
        g.setAmbiental(g.getAmbiental()+1);
        update( g);
end

rule "ako je odabrana slika sa tehnologijom"
no-loop true
    when
     g: Genre (picture==Picture.Tehnologija)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+2);
        g.setDetective(g.getDetective()+3);
        g.setSpecific(g.getSpecific()+3);
        update( g);
end

rule "ako je odabrana slika kao iz bajke"
no-loop true
    when
     g: Genre (picture==Picture.Bajka)
    then
        g.setHorror(g.getHorror()+1);
        g.setMysterious(g.getMysterious()+3);
        g.setDetective(g.getDetective()+2);
        g.setSpecific(g.getSpecific()+1);
        g.setAmbiental(g.getAmbiental()+2);
        update( g);
end


rule "konacan odabir zanra sobe"
when
    g : Genre() 
    r: Room(genre==null) 
then
    String finalGenre = r.determineGenre(g);
   r.setGenre(finalGenre);
    update(r);
    
end
